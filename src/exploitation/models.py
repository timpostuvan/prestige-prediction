
import torch.nn.functional as F
import numpy as np
import torch.nn as nn
import torch_geometric.nn as graphnn, MessagePassing


class LinearRegression(nn.Module):
    def __init__(self, input_size, output_size):
        super().__init__()
        self.linear = nn.Linear(in_features=input_size, out_features=output_size)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x, edge_index):
        x = self.linear(x)
        x = self.sigmoid(x)
        return x

class GAT(MessagePassing):
    def __init__(self, input_size, hidden_size, output_size, num_layers,heads):
        super().__init__(aggr='add')
        self.gat1 = graphnn.GAT(in_channels=input_size, hidden_channels=hidden_size, out_channels=output_size, num_layers=num_layers, heads=heads, dropout=0.15, v2=True)

    def forward(self, x, edge_index):
        x = self.gat1(x, edge_index)
        return x

class GCN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size, num_layers,heads):
        super().__init__()
        self.gcn = graphnn.GCN(in_channels=input_size, hidden_channels=hidden_size, out_channels=output_size, num_layers=num_layers)

    def forward(self, x, edge_index, edge_weights=None):
        if edge_weights != None:
            x = self.gat(x, edge_index, edge_weights)
        else:
            x = self.gcn(x, edge_index)
        return x
    