import torch
import torch.nn as nn
import torch_geometric.nn as graphnn

from torch_geometric.nn import MessagePassing
from torch_geometric.utils import add_self_loops
from torch_geometric.nn.models.basic_gnn import BasicGNN


class LinearRegression(nn.Module):
    def __init__(self, input_size, output_size):
        super().__init__()
        self.linear = nn.Linear(in_features=input_size, out_features=output_size)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x, edge_index, edge_attr):
        x = self.linear(x)
        x = self.sigmoid(x)
        return x


class GCN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size, num_layers):
        super().__init__()
        self.gcn = graphnn.GCN(
            in_channels=input_size, 
            hidden_channels=hidden_size, 
            out_channels=output_size, 
            num_layers=num_layers,
            dropout=0.15
        )
        self.sigmoid = nn.Sigmoid()

    def forward(self, x, edge_index, edge_attr):
        x = self.gcn(x, edge_index)
        x = self.sigmoid(x)
        return x


class GAT(nn.Module):
    def __init__(self, input_size, hidden_size, output_size, num_layers, heads):
        super().__init__()
        self.gat = graphnn.GAT(
            in_channels=input_size, 
            hidden_channels=hidden_size, 
            out_channels=output_size, 
            num_layers=num_layers, 
            heads=heads, 
            dropout=0.15, 
            v2=True
        )
        self.sigmoid = nn.Sigmoid()

    def forward(self, x, edge_index, edge_attr):
        x = self.gat(x, edge_index)
        x = self.sigmoid(x)
        return x


class WeightedGCNConv(MessagePassing):
    def __init__(self, in_channels, out_channels):
        super(WeightedGCNConv, self).__init__(aggr='add') 
        self.lin = nn.Linear(in_channels, out_channels, bias=False)
        self.bias = nn.Parameter(torch.Tensor(out_channels))

    def forward(self, x, edge_index, edge_weight, **kwargs):
        edge_index, edge_weight = add_self_loops(
            edge_index, 
            edge_weight, 
            num_nodes=x.size(0), 
            fill_value=edge_weight.mean()
        )

        x = self.lin(x)

        row, col = edge_index
        deg = self.weighted_degree(row, x.size(0), edge_weight, dtype=x.dtype)

        deg_inv_sqrt = deg.pow(-0.5)
        deg_inv_sqrt[deg_inv_sqrt == float('inf')] = 0
        norm = edge_weight * deg_inv_sqrt[row] * deg_inv_sqrt[col]

        out = self.propagate(edge_index, x=x, norm=norm)
        out += self.bias
        return out

    def message(self, x_j, norm):
        return norm.view(-1, 1) * x_j

    def weighted_degree(self, index, num_nodes, weights, dtype = None):
        out = torch.zeros((num_nodes, ), dtype=dtype, device=index.device)
        return out.scatter_add_(0, index, weights)


class WeightedGCNModel(BasicGNN):
    supports_edge_weight = True
    supports_edge_attr = False

    def init_conv(self, in_channels: int, out_channels: int,
                  **kwargs) -> MessagePassing:
        return WeightedGCNConv(in_channels, out_channels, **kwargs)


class WeightedGCN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size, num_layers):
        super().__init__()
        self.weighted_gcn = WeightedGCNModel(
            in_channels=input_size, 
            hidden_channels=hidden_size, 
            out_channels=output_size, 
            num_layers=num_layers,
            dropout=0.15
        )
        self.sigmoid = nn.Sigmoid()

    def forward(self, x, edge_index, edge_attr):
        x = self.weighted_gcn(x, edge_index, edge_weight=edge_attr[:, 0])
        x = self.sigmoid(x)
        return x
