import torch.nn as nn
import torch_geometric.nn as graphnn
import torch

from torch_geometric.nn import MessagePassing
from torch_geometric.utils import add_self_loops, degree


class GAT(nn.Module):
    def __init__(self, input_size, hidden_size, output_size, num_layers,heads):
        super().__init__()
        self.gat1 = graphnn.GAT(in_channels=input_size, hidden_channels=hidden_size, out_channels=output_size, num_layers=num_layers, heads=heads, dropout=0.15, v2=True)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x, edge_index, edge_attr):
        x = self.gat1(x, edge_index)
        x = self.sigmoid(x)
        return x


class MPGCN(MessagePassing):
    def __init__(self, in_channels, out_channels, weighted_graph=False):
        super(MPGCN, self).__init__(aggr='add') 
        self.weighted_graph = weighted_graph
        self.lin = nn.Linear(in_channels, out_channels, bias=False)
        self.bias = nn.Parameter(torch.Tensor(out_channels))

    def forward(self, x, edge_index, edge_attr):
        edge_index, edge_attr = add_self_loops(
            edge_index, 
            edge_attr, 
            num_nodes=x.size(0), 
            fill_value=edge_attr.mean(dim=0)
        )

        x = self.lin(x)

        row, col = edge_index

        if self.weighted_graph:
            weights = edge_attr[:, 0]
            deg = self.weighted_degree(row, x.size(0), weights, dtype=x.dtype)
        else:
            deg = degree(row, x.size(0), dtype=x.dtype)

        deg_inv_sqrt = deg.pow(-0.5)
        deg_inv_sqrt[deg_inv_sqrt == float('inf')] = 0
        if self.weighted_graph:
            weights = edge_attr[:, 0]
            norm = weights * deg_inv_sqrt[row] * deg_inv_sqrt[col]
        else:
            norm = deg_inv_sqrt[row] * deg_inv_sqrt[col]

        out = self.propagate(edge_index, x=x, norm=norm)
        out += self.bias
        return out

    def message(self, x_j, norm):
        return norm.view(-1, 1) * x_j

    def weighted_degree(self, index, num_nodes, weights, dtype = None):
        out = torch.zeros((num_nodes, ), dtype=dtype, device=index.device)
        return out.scatter_add_(0, index, weights)


class MPGCN_Net(torch.nn.Module):
    def __init__(self, in_channels, hidden_channels, out_channels, weighted_graph=False):
        super(MPGCN_Net, self).__init__()
        self.weighted_graph = weighted_graph
        
        self.conv1 = MPGCN(in_channels, out_channels, weighted_graph=weighted_graph)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x, edge_index, edge_attr):
        x = self.conv1(x, edge_index, edge_attr)
        return self.sigmoid(x)


class LinearRegression(nn.Module):
    def __init__(self, input_size, output_size):
        super().__init__()
        self.linear = nn.Linear(in_features=input_size, out_features=output_size)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x, edge_index, edge_attr):
        x = self.linear(x)
        x = self.sigmoid(x)
        return x


class GCN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size):
        super().__init__()

        self.graphconv1 = graphnn.GCNConv(input_size, output_size)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x, edge_index, edge_attr):
        x = self.graphconv1(x, edge_index)
        return self.sigmoid(x)
