import torch.nn as nn
import torch_geometric.nn as graphnn


class LinearRegression(nn.Module):
    def __init__(self, input_size, output_size):
        super().__init__()
        self.linear = nn.Linear(in_features=input_size, out_features=output_size)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x, edge_index, edge_attr):
        x = self.linear(x)
        x = self.sigmoid(x)
        return x


class GCN(nn.Module):
    def __init__(self, input_size, hidden_size, output_size, num_layers, weighted_graph=False):
        super().__init__()
        self.weighted_graph = weighted_graph
        self.gcn = graphnn.GCN(
            in_channels=input_size, 
            hidden_channels=hidden_size, 
            out_channels=output_size, 
            num_layers=num_layers,
            dropout=0.15
        )
        self.sigmoid = nn.Sigmoid()

    def forward(self, x, edge_index, edge_attr):
        if self.weighted_graph:
            edge_weight = edge_attr[:, 0]
            x = self.gcn(x, edge_index, edge_weight=edge_weight)
        else:
            x = self.gcn(x, edge_index)
        return self.sigmoid(x)


class GAT(nn.Module):
    def __init__(self, input_size, hidden_size, output_size, num_layers, heads):
        super().__init__()
        self.gat = graphnn.GAT(
            in_channels=input_size, 
            hidden_channels=hidden_size, 
            out_channels=output_size, 
            num_layers=num_layers, 
            heads=heads, 
            dropout=0.15, 
            v2=True
        )
        self.sigmoid = nn.Sigmoid()

    def forward(self, x, edge_index, edge_attr):
        x = self.gat(x, edge_index)
        x = self.sigmoid(x)
        return x
